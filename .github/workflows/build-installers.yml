name: Build Installers

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        shell: bash

      - name: Build NSIS installer (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Install NSIS
          choco install nsis -y

          # Build the Windows executable
          pyinstaller --onefile --windowed --icon "Remote Zip Explorer.ico" main.py

          # Create NSIS script
          @"
          !define APPNAME "Remote Zip Explorer"
          !define APPVERSION "1.0"
          !define EXEFILE "Remote Zip Explorer.exe"
          !define COMPANY "NeptoTech"

          OutFile "RemoteZipExplorerInstaller.exe"
          InstallDir "$PROGRAMFILES\${APPNAME}"
          InstallDirRegKey HKCU "Software\${COMPANY}\${APPNAME}" "Install_Dir"
          ShowInstDetails show
          ShowUninstDetails show

          Page directory
          Page instfiles
          UninstPage uninstConfirm
          UninstPage instfiles

          Section "Install"
            SetOutPath "$INSTDIR"
            File "dist\${EXEFILE}"
            WriteUninstaller "$INSTDIR\Uninstall.exe"

            ; Shortcuts
            CreateShortcut "$SMPROGRAMS\${APPNAME}.lnk" "$INSTDIR\${EXEFILE}"
            CreateShortcut "$DESKTOP\${APPNAME}.lnk" "$INSTDIR\${EXEFILE}"

            ; Registry (Add/Remove Programs entry)
            WriteRegStr HKCU "Software\${COMPANY}\${APPNAME}" "Install_Dir" "$INSTDIR"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayName" "${APPNAME} ${APPVERSION}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "UninstallString" "$INSTDIR\Uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "Publisher" "${COMPANY}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayVersion" "${APPVERSION}"
          SectionEnd

          Section "Uninstall"
            Delete "$INSTDIR\${EXEFILE}"
            Delete "$INSTDIR\Uninstall.exe"

            Delete "$SMPROGRAMS\${APPNAME}.lnk"
            Delete "$DESKTOP\${APPNAME}.lnk"

            RMDir "$INSTDIR"

            ; Remove registry keys
            DeleteRegKey HKCU "Software\${COMPANY}\${APPNAME}"
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}"
          SectionEnd
          "@ | Out-File -Encoding ASCII installer.nsi

          # Compile the installer
          makensis installer.nsi



      - name: Build DMG installer (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pip install Pillow
          pyinstaller --onefile --windowed --icon "Remote Zip Explorer.png" main.py
          brew install create-dmg
          mkdir -p dist/dmg
          cp dist/main dist/dmg/RemoteZipExplorer
          create-dmg --volname "Remote Zip Explorer" \
                     --window-pos 200 120 \
                     --window-size 800 400 \
                     --icon-size 100 \
                     --icon "RemoteZipExplorer" 200 190 \
                     --app-drop-link 600 185 \
                     dist/RemoteZipExplorer.dmg dist/dmg/
        shell: bash

      - name: Build AppImage installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              libxcb-render-util0 \
              libxcb-image0 \
              libxkbcommon-x11-0 \
              libxcb-shape0 \
              libxcb-icccm4 \
              libxcb-cursor0 \
              libxcb-keysyms1 \
              libxcb-xkb1 \
              fuse

          pyinstaller --onefile --windowed --icon "Remote Zip Explorer.png" main.py

          # Download latest AppImageTool
          wget -O appimagetool.AppImage https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool.AppImage

          # Prepare AppDir
          mkdir -p AppDir/usr/bin
          cp dist/main AppDir/usr/bin/RemoteZipExplorer

          # Minimal AppRun launcher
          echo -e '#!/bin/bash\n"$APPDIR/usr/bin/RemoteZipExplorer"' > AppDir/AppRun
          chmod +x AppDir/AppRun

          # Desktop entry
          cat > AppDir/RemoteZipExplorer.desktop <<'EOF'
          [Desktop Entry]
          Name=RemoteZipExplorer
          Exec=RemoteZipExplorer
          Icon=RemoteZipExplorer
          Type=Application
          Categories=Utility;
          EOF

          # Icon
          cp "Remote Zip Explorer.png" AppDir/RemoteZipExplorer.png

          mkdir -p dist
          ./appimagetool.AppImage  AppDir ./dist/RemoteZipExplorer.AppImage

        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: |
            ${{ matrix.os == 'windows-latest' && 'installer-exe' || matrix.os == 'macos-latest' && 'installer-dmg' || matrix.os == 'ubuntu-latest' && 'installer-appimage' }}
          path: |
            ${{ matrix.os == 'windows-latest' && './dist/Remote Zip Explorer.exe' || matrix.os == 'macos-latest' && 'dist/RemoteZipExplorer.dmg' || matrix.os == 'ubuntu-latest' && 'dist/RemoteZipExplorer.AppImage' }}
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts


      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
            tag: v1.0
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}